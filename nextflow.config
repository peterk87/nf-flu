/*
 * -------------------------------------------------
 *  peterk87/nf-iav-illumina Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  // input/output params
  input                             = ''
  outdir                            = 'results'
  // IRMA options
  irma_module                       = 'FLU-utr'
  keep_ref_deletions                = true
  // H/N subtyping options
  pident_threshold                  = 0.85
  min_aln_length                    = 50
  // reference data
  ncbi_influenza_fasta              = 'https://ftp.ncbi.nih.gov/genomes/INFLUENZA/influenza.fna.gz'
  ncbi_influenza_metadata           = 'https://ftp.ncbi.nih.gov/genomes/INFLUENZA/genomeset.dat.gz'
  // Slurm scheduler options
  slurm_queue                       = ''
  slurm_queue_size                  = 100
  // Boilerplate options
  tracedir                          = "${params.outdir}/pipeline_info"
  publish_dir_mode                  = 'copy'
  validate_params                   = true
  help                              = false
  monochrome_logs                   = false
  enable_conda                      = false
  singularity_pull_docker_container = false
  show_hidden_params                = false
  schema_ignore_params              = 'modules,genomes'
}

includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
  charliecloud {
    charliecloud.enabled = true
  }
  conda {
    params.enable_conda = true
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  podman {
    podman.enabled = true
  }
  singularity {
    singularity.enabled = true
  }
  slurm {
    includeConfig 'conf/slurm.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name            = 'peterk87/nf-iav-illumina'
  description     = 'Influenza genome assembly with IRMA and consensus sequence analysis'
  homePage        = 'https://github.com/peterk87/nf-iav-illumina'
  author          = 'Peter Kruczkiewicz'
  version         = '2.0.1'
  nextflowVersion = '>=21.04'
  mainScript      = 'main.nf'
}

// Following function from https://github.com/nf-core/vipr/blob/master/nextflow.config#L88
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
